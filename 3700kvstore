#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random

BROADCAST = "FFFF"
queue = []

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.majority = math.ceil(len(others)/2)
        self.vote_count = 0
        self.commit_votes = 0

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        self.socket.setblocking(0)

        self.dictionary = {}
        self.history = {-1: ""}
        self.prev_log_index = -1

        # ADDITIONAL VAR
        self.term = 0
        self.state = "FOLLOWER"
        self.leader = BROADCAST
        self.heartbeat = 0.15
        self.timeout = random.uniform(0.3, 0.4)
        self.last_heartbeat = time.time()

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def get(self, msg):
        if self.state != "LEADER":
            redirect = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': 'redirect',
                'MID': msg['MID']
            }
            self.send(redirect)
        elif self.state == "LEADER":
            value = ''
            if msg['key'] in self.dictionary:
                value = self.dictionary[msg['key']]
            req = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': 'ok',
                'value': value,
                'MID': msg['MID']
            }
            self.send(req)

    def put(self, msg):
        if self.state != "LEADER":
            redirect = {
                'src': self.id,
                'dst': msg['src'],
                'leader': self.leader,
                'type': 'redirect',
                'MID': msg['MID']
            }
            self.send(redirect)
        elif self.state == "LEADER":
            if self.prev_log_index == -1 or not queue:
                # send append entries request to replicas
                self.request_append_entries(msg)
                ok_msg = {
                    'src': self.id,
                    'dst': msg['src'],
                    'leader': self.leader,
                    'type': 'ok',
                    'MID': msg['MID']
                }

                self.send(ok_msg)
            else: # add the command to the queue, and wait for the current commit to finish
                queue.append(msg)

    def request_append_entries(self, msg):
        # sending out append entries request to replicas
        self.dictionary[msg['key']] = msg['value']
        for other in self.others:
            if other == self.id:
                continue
            req = {
                'src': self.id,
                'dst': other,
                'leader': self.leader,
                'type': 'append_entries',
                'MID': msg['MID'],
                'prevIndex': self.prev_log_index,
                'prevValue': self.history[self.prev_log_index],
                'key': msg['key'],
                'value': msg['value'],
            }
            self.send(req)

    def commit_put(self, msg):
        # add the entry to dictionary log
        if self.state != "LEADER":
            self.prev_log_index += 1
            self.dictionary[msg['key']] = msg['value']
            self.history[self.prev_log_index] = self.term
        else:
            # someone just voted to commit, add that to commit votes
            if self.prev_log_index == msg['prevIndex']: # if this is a commit from a previous vote, ignore
                self.commit_votes += 1
            else:
                print("Commit limit already reached, ignoring this commit")

            if self.commit_votes == self.majority:
                self.commit_votes = 0
                self.prev_log_index += 1
                self.history[self.prev_log_index] = self.term
                self.dictionary[msg['key']] = msg['value']

                #send commit messages to all replicas
                for other in self.others:
                    if other == self.id:
                        continue
                    req = {
                        'src': self.id,
                        'dst': other,
                        'leader': self.leader,
                        'type': 'commit',
                        'MID': msg['MID'],
                        'key': msg['key'],
                        'value': msg['value']
                    }
                    self.send(req)

                # send an ok message
                ok_msg = {
                    'src': self.id,
                    'dst': msg['src'],
                    'leader': self.leader,
                    'type': 'ok',
                    'MID': msg['MID']
                }
                self.send(ok_msg)

                # continue with the next command
                if queue:
                    next_command = queue.pop()
                    self.request_append_entries(next_command)



    def append_entries(self, msg):
        # this is only sent from the leader to followers, therefore no need to check
        # if leader or not

        if self.prev_log_index == -1:
            # automatically accept, this is the first entry in the log
            print("ACCEPTING")
            commit_msg = {
                'src': self.id,
                'dst': self.leader,
                'leader': self.leader,
                'type': 'commit',
                'MID': msg['MID'],
                'key': msg['key'],
                'value': msg['value'],
                'prevIndex': msg['prevIndex']
            }
            self.send(commit_msg)
        else:
            # check if the log matches
            if self.prev_log_index == msg['prevIndex'] and self.history[self.prev_log_index] == msg['prevValue']:
                # accept
                commit_msg = {
                    'src': self.id,
                    'dst': self.leader,
                    'leader': self.leader,
                    'type': 'commit',
                    'MID': msg['MID'],
                    'key': msg['key'],
                    'value': msg['value'],
                    'prevIndex': msg['prevIndex']
                }
                self.send(commit_msg)
            else:
                # we need to backtrack and update the log accordingly
                commit_msg = {
                    'src': self.id,
                    'dst': self.leader,
                    'leader': self.leader,
                    'type': 'commit',
                    'MID': msg['MID'],
                    'key': msg['key'],
                    'value': msg['value'],
                    'prevIndex': msg['prevIndex']
                }
                self.send(commit_msg)

    def elect(self):
        print("{} is requesting to be new leader".format(self.id), flush=True)
        self.term += 1
        self.state = "CANDIDATE"

        for other in self.others:
            req = {
                'src': self.id,
                'dst': other,
                'leader': self.leader,
                'type': 'vote_request',
                'term': self.term,
            }
            self.send(req)

    # def grant_vote(self, msg):
    #     if True:
    #         req = {
    #             'src': self.id,
    #             'dst': msg['src'],
    #             'leader': self.leader,
    #             'type': 'grant_vote',
    #         }
    #
    #         self.send(req)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))
        print("Sent message '%s'" % (message,), flush=True)

    def handle_req(self, msg):
        if msg['type'] == 'get':
            self.get(msg)
        elif msg['type'] == 'put':
            self.put(msg)
        elif msg['type'] == 'heartbeat':
            if msg['term'] >= self.term:
                self.last_heartbeat = time.time()
                self.leader = msg['leader']
                self.term = msg['term']
                self.state = "FOLLOWER"
                self.vote_count = 0
        elif msg['type'] == 'append_entries':
            self.append_entries(msg)
        elif msg['type'] == 'commit':
            # here we check if a majority of replicas agree to commit
            self.commit_put(msg)
        elif msg['type'] == 'vote_request':
            if self.term < msg['term'] and self.state != "LEADER":  # if the term is higher, means they havent voted yet
                self.vote_count = 0
                self.term = msg['term']
                self.last_heartbeat = time.time()
                # vote for the requester
                vote = {'src': self.id, 'dst': msg['src'], 'type': 'vote', 'term': self.term, 'leader': msg['src']}
                self.send(vote)
        elif msg['type'] == "vote":
            if self.state == "FOLLOWER": # means someone already won election
                return
            self.vote_count += 1
            print("VOTE COUNT: {}, required: {}".format(self.vote_count, self.majority))
            # check if they won
            if self.vote_count >= self.majority:
                print("{} has won the Election!".format(self.id))
                self.state = "LEADER"
                self.leader = self.id
                self.vote_count = 0

                # send heartbeat
                for other in self.others:
                    heartbeat = {"src": self.id, "dst": other, "leader": self.id, "type": "heartbeat",
                                 "term": self.term}
                    self.send(heartbeat)


    def run(self):
        while True:
            try:
                data, addr = self.socket.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
            except BlockingIOError:
                current_time = time.time()
                if current_time - self.last_heartbeat >= self.heartbeat and self.state == "LEADER":
                    # send a heartbeat out
                    self.last_heartbeat = current_time
                    for other in self.others:
                        if other == self.id:
                            continue
                        heartbeat = {"src": self.id, "dst": other, "leader": self.id, "type": "heartbeat",
                                     "term": self.term}
                        self.send(heartbeat)

                elif current_time - self.last_heartbeat >= self.timeout:
                    self.last_heartbeat = current_time # set the most recent heartbeat as now, we are starting election
                    self.elect()
                continue

            msg = json.loads(msg)
            self.handle_req(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()